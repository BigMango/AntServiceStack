//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1026
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AntServiceStack.Common.Types
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Runtime.Serialization;
    using System.Collections.Generic;
    using AntServiceStack.ProtoBuf;
    using AntServiceStack.ServiceHost;
    using AntServiceStack.Baiji.Specific;
    using System.Linq;
    
    
    /// <summary>
    /// Common type definition of the request payload, concrete request types may choose to include this
    /// common type for optional versioning and output selecting requirements.
    /// The recommended naming convention we use for the concrete type names is the name
    /// of the service (the verb or call name) followed by "RequestType": VerbNameRequestType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1026")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace= "http://soa.ant.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace= "http://soa.ant.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace= "http://soa.ant.com/common/types/v1")]
    [ProtoContract()]
    public partial class CommonRequestType : ISpecificRecord
    {
        
        private string versionField;
        
        private List<string> outputSelectorField;
        
        public static readonly AntServiceStack.Baiji.Schema.Schema SCHEMA = AntServiceStack.Baiji.Schema.Schema.Parse((("{\"type\":\"record\",\"name\":\"CommonRequestType\",\"namespace\":\"" + typeof(CommonRequestType).Namespace) 
                        + "\",\"doc\":null,\"fields\":[{\"name\":\"Version\",\"type\":[\"string\",\"null\"]},{\"name\":\"Outpu" +
                            "tSelector\",\"type\":[{\"type\":\"array\",\"items\":[\"string\",\"null\"]},\"null\"]}]}"));
        
        /// <summary>
        /// The version number of the API code that you are
        /// programming against (e.g., 1.2.0). If not set, defaults to latest version.
        /// Whether and how this field is leveraged depends on specific service.
        /// </summary>
        [DataMember()]
        [ProtoMember(1)]
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }

        /// <summary>
        /// You can use the OutputSelector field to restrict the data returned by this call.
        /// When you make a call such as GetItem that retrieves data from ant service,
        /// the OutputSelector field is useful for restricting the data returned.
        /// This field makes the call response easier to use, especially when a large payload
        /// would be returned. If you use the OutputSelector field, the output data
        /// will include only the fields you specified in the request.
        /// For example, if you are using GetItem and you want the item data
        /// in the response to be restricted to the ViewItemURL
        /// (the URL where a user can view the listing) and BookItNowPrice, then
        /// within the GetItem request, specify those output fields.
        /// The output selecting logic is handled uniformly at SOA framework level.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OutputSelector")]
        [DataMember()]
        [ProtoMember(2)]
        public List<string> OutputSelector
        {
            get
            {
                if ((this.outputSelectorField == null))
                {
                    this.outputSelectorField = new List<string>();
                }
                return this.outputSelectorField;
            }
            set
            {
                this.outputSelectorField = value;
            }
        }
        
        public virtual AntServiceStack.Baiji.Schema.Schema GetSchema()
        {
            return SCHEMA;
        }
        
        public virtual object Get(int fieldPos)
        {
            switch(fieldPos)
            {
                case 0: return this.Version;
                case 1: return this.OutputSelector;
                default: throw new AntServiceStack.Baiji.Exceptions.BaijiRuntimeException("Bad index " + fieldPos + " in Get()");
            }
        }
        
        public virtual void Put(int fieldPos, object fieldValue)
        {
            switch(fieldPos)
            {
                case 0: this.Version = (System.String)fieldValue; break;
                case 1: this.OutputSelector = (List<System.String>)fieldValue; break;
                default: throw new AntServiceStack.Baiji.Exceptions.BaijiRuntimeException("Bad index " + fieldPos + " in Put()");
            }
        }
        
        public virtual object Get(string fieldName)
        {
            var recordSchema = GetSchema() as AntServiceStack.Baiji.Schema.RecordSchema;
            if (recordSchema == null)
            {
                return null;
            }
            AntServiceStack.Baiji.Schema.Field field;
            if (!recordSchema.TryGetField(fieldName, out field))
            {
                return null;
            }
            return Get(field.Pos);
        }
        
        public virtual void Put(string fieldName, object fieldValue)
        {
            var recordSchema = GetSchema() as AntServiceStack.Baiji.Schema.RecordSchema;
            if (recordSchema == null)
            {
                return ;
            }
            AntServiceStack.Baiji.Schema.Field field;
            if (!recordSchema.TryGetField(fieldName, out field))
            {
                return ;
            }
            Put(field.Pos, fieldValue);
        }
    }
}
