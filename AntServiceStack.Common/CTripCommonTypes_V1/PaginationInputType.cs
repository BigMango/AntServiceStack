//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1026
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AntServiceStack.Common.Types
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Runtime.Serialization;
    using System.Collections.Generic;
    using AntServiceStack.ProtoBuf;
    using AntServiceStack.ServiceHost;
    using AntServiceStack.Baiji.Specific;
    using System.Linq;
    
    
    /// <summary>
    /// Controls the pagination of the result set. Child elements specify the maximum
    /// number of items to return per call and which page of data to return.
    /// Controls which items are returned in the response, but does not control
    /// the details associated with the returned items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1026")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class PaginationInputType : ISpecificRecord
    {
        
        private int pageNumberField;
        
        private int entriesPerPageField;
        
        public static readonly AntServiceStack.Baiji.Schema.Schema SCHEMA = AntServiceStack.Baiji.Schema.Schema.Parse((("{\"type\":\"record\",\"name\":\"PaginationInputType\",\"namespace\":\"" + typeof(PaginationInputType).Namespace) 
                        + "\",\"doc\":null,\"fields\":[{\"name\":\"PageNumber\",\"type\":\"int\"},{\"name\":\"EntriesPerPage" +
                            "\",\"type\":\"int\"}]}"));
        
        /// <summary>
        /// Specifies which subset of data (or "page") to return in the call
        /// response. The number of data pages is determined by the total number of
        /// items matching the request search criteria (returned in
        /// paginationOutput.totalEntries) divided by the number of entries to
        /// display in each response (entriesPerPage). You can return max number of
        /// pages of the result set by issuing multiple requests and specifying,
        /// in sequence, the pages to return.
        /// Specify a positive value equal to or lower than the number of pages available (which you
        /// determine by examining the results of your initial request).
        /// </summary>
        [DataMember()]
        [ProtoMember(1)]
        public int PageNumber
        {
            get
            {
                return this.pageNumberField;
            }
            set
            {
                this.pageNumberField = value;
            }
        }
        
        /// <summary>
        /// Specifies the maximum number of entries to return in a single call. If
        /// the number of entries found on the specified pageNumber is less than the
        /// value specified here, the number of items returned will be less than the
        /// value of entriesPerPage. This indicates the end of the result set.
        /// </summary>
        [DataMember()]
        [ProtoMember(2)]
        public int EntriesPerPage
        {
            get
            {
                return this.entriesPerPageField;
            }
            set
            {
                this.entriesPerPageField = value;
            }
        }
        
        public virtual AntServiceStack.Baiji.Schema.Schema GetSchema()
        {
            return SCHEMA;
        }
        
        public virtual object Get(int fieldPos)
        {
            switch(fieldPos)
            {
                case 0: return this.PageNumber;
                case 1: return this.EntriesPerPage;
                default: throw new AntServiceStack.Baiji.Exceptions.BaijiRuntimeException("Bad index " + fieldPos + " in Get()");
            }
        }
        
        public virtual void Put(int fieldPos, object fieldValue)
        {
            switch(fieldPos)
            {
                case 0: this.PageNumber = (int)fieldValue; break;
                case 1: this.EntriesPerPage = (int)fieldValue; break;
                default: throw new AntServiceStack.Baiji.Exceptions.BaijiRuntimeException("Bad index " + fieldPos + " in Put()");
            }
        }
        
        public virtual object Get(string fieldName)
        {
            var recordSchema = GetSchema() as AntServiceStack.Baiji.Schema.RecordSchema;
            if (recordSchema == null)
            {
                return null;
            }
            AntServiceStack.Baiji.Schema.Field field;
            if (!recordSchema.TryGetField(fieldName, out field))
            {
                return null;
            }
            return Get(field.Pos);
        }
        
        public virtual void Put(string fieldName, object fieldValue)
        {
            var recordSchema = GetSchema() as AntServiceStack.Baiji.Schema.RecordSchema;
            if (recordSchema == null)
            {
                return ;
            }
            AntServiceStack.Baiji.Schema.Field field;
            if (!recordSchema.TryGetField(fieldName, out field))
            {
                return ;
            }
            Put(field.Pos, fieldValue);
        }
    }
}
