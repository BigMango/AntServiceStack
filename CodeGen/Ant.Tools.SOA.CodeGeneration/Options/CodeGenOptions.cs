using System;
using System.Diagnostics;
using System.Collections.Generic;

namespace Ant.Tools.SOA.CodeGeneration.Options
{
    /// <summary>
    /// This class defines the data structure for holding the code generation options 
    /// selected by the client.
    /// </summary>
    [DebuggerStepThrough]
    public class CodeGenOptions
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeGenOptions"/> class.
		/// </summary>
        public CodeGenOptions()
		{
			//NamespaceMappings = new Dictionary<string, string>();
		}

        #region Public properties

        /// <summary>
        /// Target namespace of generated classes
        /// </summary>
        public string ClrNamespace { get; set; }

        /// <summary>
        /// Gets or sets the code generator mode.
        /// </summary>
        public CodeGeneratorMode CodeGeneratorMode { get; set; }

        /// <summary>
        /// Gets or sets the metadata location.
        /// e.g. 
        /// c:\contracts\newsservice.wsdl
        /// http://www.newsservice.com/contracts/newsservice.wsdl
        /// http://www.newsservice.com/endpoints/newsservice/mex
        /// </summary>
        public string MetadataLocation { get; set; }

        /// <summary>
        /// Gets or sets the preferred code generation language.
        /// </summary>
        public CodeLanguage Language { get; set; }

        /*
        /// <summary>
        /// Gets or sets the serializer that will be targeted.
        /// </summary>
        public SerializerMode Serializer { get; set; }
        */

        /// <summary>
        /// Gets or sets the output location for the generated code.
        /// e.g. 
        /// c:\mynewsproject\code
        /// </summary>
        public string OutputLocation { get; set; }

        /// <summary>
        ///	Gets or sets the project directory.
        /// </summary>
        public string ProjectDirectory { get; set; }

        /*
        /// <summary>
        /// Gets or sets the configuration file that should be altered by 
        /// code generation process.
        /// If this value is not available generated configuration is written
        /// to output.config file in location specified by OutputLocation 
        /// property.
        /// </summary>
        public string ConfigurationFile { get; set; }
        */

        /// <summary>
        /// Gets or sets a value indicating whether data contracts only are to be generated.
        /// </summary>
        public bool GenerateDataContractsOnly { get; set; }

        /// <summary>
        /// Gets or sets the data contract files (XSD and WSDL).
        /// </summary>
        public string[] DataContractFiles { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether a physical file should be created per type 
        /// basis.
        /// </summary>
        public bool GenerateSeparateFiles { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether a physical file should be created per namespace 
        /// basis.
        /// </summary>
        public bool GenerateSeparateFilesEachNamespace { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether to generate separate files each xsd file.
		/// </summary>
		public bool GenerateSeparateFilesEachXsd { get; set; }

        public bool OnlyUseDataContractSerializer { get; set; }

        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the name of the project.
        /// </summary>
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or sets the name of the output file.
        /// </summary>
        public string OutputFileName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to overwrite existing files.
        /// </summary>
        public bool OverwriteExistingFiles { get; set; }

        /*
        /// <summary>
        /// Gets or sets the namespace mappings.
        /// </summary>
        public Dictionary<string, string> NamespaceMappings { get; set; }
        */
        
        /// <summary>
        /// The root code generated tag
        /// </summary>
        //public bool AutoGeneratedTag { get; set; }

        /// <summary>
        /// Indicate if property PropertyNameSpecified must be generated.
        /// </summary>
        //public bool GeneratePropertyNameSpecifiedTag { get; set; }

        /// <summary>
        /// Enable lazy pattern
        /// </summary>
        public bool EnableLazyLoading { get; set; }

        /// <summary>
        /// Generate summary documentation
        /// </summary>
        public bool EnableSummaryComment { get; set; }

        /// <summary>
        /// Indicate if generate Net 3.0 data contract attributes
        /// </summary>
        //public bool GenerateDataContractAttributes { get; set; }

        /// <summary>
        /// Indicate if generate NET 2.0 serialization attributes
        /// </summary>
        //public bool GenerateXMLAttributes { get; set; }

        /// <summary>
        /// Enable/Disable Global initialization of the fields in both Constructors, Lazy Properties. Maximum override
        /// </summary>
        public bool EnableInitializeFields { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the generated types should implement <see cref="INotifyPropertyChanged"/>.
        /// </summary>
        public bool EnableDataBinding { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether typed lists should be generated or not instead of arrays.
        /// </summary>
        public bool GenerateTypedLists { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether collections should be generated or not instead of arrays.
        /// </summary>
        public bool GenerateCollections { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether classes should be sorted ascending by its' name
		/// </summary>
		public bool AscendingClassByName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether DTO should implements Baiji serialization
        /// </summary>
        public bool EnableBaijiSerialization { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether request class should implements auth interface
        /// </summary>
        public bool AddCustomRequestInterface { get; set; }

        /// <summary>
        /// Gets or sets auth interface that request class should implements
        /// </summary>
        public string CustomRequestInterface { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether DTO should force XmlRootAttribute'ElementName to xsd:element:name
        /// </summary>
        public bool ForceElementName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether DTO should force XmlRootAttribute'Namespace to xs:schema:targetNamespace
        /// </summary>
        public bool ForceElementNamespace { get; set; }

        /// <summary>
        /// Should generate asynchronous operations
        /// </summary>
        public bool GenerateAsyncOperations { get; set; }

        #endregion
    }
}
